[tool.poetry]
name = "zero2prod"
version = "0.1.0"
description = "This is an imitation of the server from the book \"Zero to Production in Rust\" by Luca Palmieri."
authors = ["Mike Lane <mikelane@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
starlite = {extras = ["cli", "full"], version = "^1.51.0"}

[tool.poetry.group.test.dependencies]
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-xdist = "^3.1.0"
pytest-asyncio = "^0.20.3"


[tool.poetry.group.lint.dependencies]
ruff = "^0.0.242"
black = "^23.1.0"
isort = "^5.12.0"
pre-commit = "^3.0.4"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra"
testpaths = ["tests"]
python_functions = ["it_*", "test_*"]
asyncio_mode = "auto"

[tool.black]
line-length = 120
target-version = ['py311']
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
force_grid_wrap = 2

[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F", "B", "Q"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "Q"]
unfixable = []

# Enable autofix by default
fix = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py311"

[tool.ruff.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "single"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
